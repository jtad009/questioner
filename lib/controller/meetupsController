import knex from 'knex';
import meetupModel from '../model/Meetup';
const db = knex({
  client: 'pg',
  connection: {
    host: '127.0.0.1',
    user: 'israeledet',
    password: 'ct320d',
    database: 'Questioner'
  }
});

const MEETUPS = [
  {
    tags: ['Events', 'Meetsups', 'Andela', 'Hackerton'],
    id: 1,
    createdOn: 'Sun . 10:40 PM . 14/12/14',
    location: 'lagos',
    images: [],
    topic: 'Hackerton in yaba',
    happeningOn: '2018-09-20',

  },
  {
    tags: ['Events', 'Meetsups', 'Andela', 'Hackerton'],
    id: 2,
    createdOn: 'Sun . 10:40 PM . 14/12/14',
    location: 'lagos',
    images: ['http://localhost:5000/images/54620ef4a1a3e.JPG'],
    topic: 'Hackerton in yaba',
    happeningOn: '2018-09-21',
  },
];
const RSVPS = [
  {
    meetup: 1,
    topic: 'Hackerton in yaba',
    status: 'no', // [yes,no,maybe]
  },
];
/**
 * @description List all meetup available
 * @param bool all - if true then return all meetups saved else return meetup with specified ID
 * @param int meetup
 * @returns array|false
 */
exports.listMeetups = (all = true, meetup_id = 0) => {
  const id = parseInt(meetup_id);// if ID is received make sure it's and integer
  let meetup = [];// temporary array to ensure that out global list isnt over-written
  if (!all) {
    if (id > 0) {
      meetup = MEETUPS.filter(meetupLists => parseInt(meetupLists.id) === id);
    } else {
      return 0;
    }
  } else {
    meetup = MEETUPS.slice();
  }
  return meetup;
}
/**
 * @description this function creates a new meetup
 * @param json object data
 */
export function createMeetup(data) {
  MEETUPS.push(data);
}
/**
 * @description rsvp for a meetup if it exists in the data structure
 * @param int meetupId
 * @param jsonObject data
 * @returns array|0
 */
export function rsvp(meetupId, data) {
  let rsvp = [];
  // check if the meetup id exist then update rsvp
  const meetupExist = MEETUPS.some(item => item.id === parseInt(meetupId));
  if (meetupExist) {
    RSVPS.push(data);// push rsvp if meetup exist
    rsvp = RSVPS.filter(rsvp => rsvp.meetup === parseInt(meetupId));
    return rsvp;
  }
  return 0;
}
/**
 * @descriptions should search array for meetups with date closest to today
 * @returns array
 */
export function upcoming() {
  // should search array for meetups with date < one week from today
  return MEETUPS.sort((a, b) => Number(new Date(b.happeningOn)) - Number(new Date(a.happeningOn)));
}


/**
 * VERSION TWO OF THE MEETUP API
 * CONNECTION TO DATABASE
 */

/**
 * Add new meetup information
 * 
 */
exports.addMeetup = (request, response) => {
  if (Object.keys(request.body).length > 0) {
    let images = request.body.images.length > 0 ? request.body.images.join(',') : 'NOT SET';

    db('meetups').returning('*').insert({
      topic: request.body.topic.trim(),
      location: request.body.location.trim(),
      images: images,
      tags: request.body.tags.join(','),
      happeningOn: request.body.happeningOn,

      created: (new Date()).toDateString()
    }).then(result => {
      let res = {
        status: 201,
        data: result
      }
      response.status(201).json(res);
    });


  } else {
    let res = {
      status: 201,
      data: 'Invalid data supplied'
    }
    response.status(409).json(res);
  }
}
exports.listMeetup = (request, response) => {
  
    

    db.select('*').from('meetups').then(result => {
    console.log(result)
      response.status(200).json(result);
    });


 
}